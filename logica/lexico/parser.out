Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND_LOGICO
    CATCH
    CLASS
    COMILLAS_DOBLES
    COMILLAS_SIMPLES
    CONST
    CORCHETE_APERTURA
    CORCHETE_CIERRE
    DECREMENTO
    DOSPUNTOS
    GRADOS
    INCREMENTO
    INIT
    OR_LOGICO
    POTENCIA
    PUNTO
    REAL
    SIMGRADOS
    SWITCH
    TRY
<<<<<<< HEAD
=======
    VAR
>>>>>>> 9125a19 (api con el sintactico)
    VOID

Grammar

Rule 0     S' -> importacion
Rule 1     importacion -> BRING ID PUNTOCOMA
Rule 2     programa -> importacion programa
Rule 3     programa -> funcion programa
Rule 4     programa -> importacion
Rule 5     programa -> funcion
Rule 6     funciones -> funcion funciones
Rule 7     funciones -> funcion
Rule 8     funcion -> FUN ID PARENTESIS_APERTURA parametros_declaracion PARENTESIS_CIERRE cuerpo
Rule 9     argumentos -> expresion
Rule 10    argumentos -> expresion COMA argumentos
Rule 11    argumentos -> empty
Rule 12    parametros_declaracion -> tipo_dato ID
Rule 13    parametros_declaracion -> tipo_dato ID COMA parametros_declaracion
Rule 14    parametros_declaracion -> empty
Rule 15    sentencia_if -> IF PARENTESIS_APERTURA expresion PARENTESIS_CIERRE cuerpo
Rule 16    sentencia_if -> IF PARENTESIS_APERTURA expresion PARENTESIS_CIERRE cuerpo ELSE cuerpo
Rule 17    sentencia_while -> WHILE PARENTESIS_APERTURA expresion PARENTESIS_CIERRE cuerpo
Rule 18    sentencia_for -> FOR PARENTESIS_APERTURA declaracion_variable PUNTOCOMA expresion PUNTOCOMA expresion PARENTESIS_CIERRE cuerpo
Rule 19    condicion -> condicion AND condicion
Rule 20    condicion -> condicion OR condicion
Rule 21    condicion -> NOT condicion
Rule 22    condicion -> PARENTESIS_APERTURA condicion PARENTESIS_CIERRE
Rule 23    condicion -> exp op_relacional exp
Rule 24    op_relacional -> MENORQUE
Rule 25    op_relacional -> MAYORQUE
Rule 26    op_relacional -> IGUAL
Rule 27    op_relacional -> MENORIGUAL
Rule 28    op_relacional -> MAYORIGUAL
Rule 29    op_relacional -> DIFERENTE
Rule 30    exp -> exp op_aritmetico exp
Rule 31    exp -> PARENTESIS_APERTURA exp PARENTESIS_CIERRE
Rule 32    exp -> ID
Rule 33    exp -> dato
Rule 34    op_aritmetico -> SUMA
Rule 35    op_aritmetico -> RESTA
Rule 36    op_aritmetico -> MULTIPLICACION
Rule 37    op_aritmetico -> DIVISION
Rule 38    dato -> NUMERO
Rule 39    dato -> CADENA
Rule 40    dato -> DEGREE
Rule 41    dato -> TIME
Rule 42    dato -> DISTANCE
Rule 43    dato -> TEMP
Rule 44    dato -> STATE
Rule 45    dato -> ANY
Rule 46    cuerpo -> LLAVE_APERTURA sentencias LLAVE_CIERRE
Rule 47    sentencias -> sentencia sentencias
Rule 48    sentencias -> sentencia
Rule 49    sentencia -> declaracion_variable
Rule 50    sentencia -> asignacion
Rule 51    sentencia -> estructura_control
Rule 52    sentencia -> llamada_funcion
Rule 53    sentencia -> retorno
Rule 54    sentencia -> expresion PUNTOCOMA
<<<<<<< HEAD
Rule 55    declaracion_variable -> VAR ID ASIGNAR expresion PUNTOCOMA
Rule 56    declaracion_variable -> VAR ID PUNTOCOMA
=======
Rule 55    declaracion_variable -> tipo_dato ID ASIGNAR expresion PUNTOCOMA
Rule 56    declaracion_variable -> tipo_dato ID PUNTOCOMA
>>>>>>> 9125a19 (api con el sintactico)
Rule 57    asignacion -> ID ASIGNAR expresion PUNTOCOMA
Rule 58    tipo_dato -> DEGREE
Rule 59    tipo_dato -> TIME
Rule 60    tipo_dato -> DISTANCE
Rule 61    tipo_dato -> TEMP
Rule 62    tipo_dato -> BOOL
Rule 63    tipo_dato -> STATE
Rule 64    tipo_dato -> ANY
Rule 65    llamada_funcion -> ID PARENTESIS_APERTURA argumentos PARENTESIS_CIERRE PUNTOCOMA
Rule 66    estructura_control -> sentencia_if
Rule 67    estructura_control -> sentencia_for
Rule 68    estructura_control -> sentencia_while
Rule 69    retorno -> RETURN expresion PUNTOCOMA
Rule 70    expresion -> expresion_logica
Rule 71    expresion -> expresion_logica operador_logico expresion
Rule 72    expresion_logica -> expresion_relacional
Rule 73    expresion_logica -> expresion_relacional operador_relacional expresion_logica
Rule 74    expresion_relacional -> expresion_aritmetica
Rule 75    expresion_relacional -> expresion_aritmetica operador_relacional expresion_relacional
Rule 76    expresion_aritmetica -> termino
Rule 77    expresion_aritmetica -> termino operador_aritmetico expresion_aritmetica
Rule 78    termino -> factor
Rule 79    termino -> factor operador_termino termino
Rule 80    factor -> ID
Rule 81    factor -> llamada_funcion
Rule 82    factor -> NUMERO
Rule 83    factor -> CADENA
Rule 84    factor -> PARENTESIS_APERTURA expresion PARENTESIS_CIERRE
Rule 85    operador_logico -> AND
Rule 86    operador_logico -> OR
Rule 87    operador_relacional -> MENORQUE
Rule 88    operador_relacional -> MAYORQUE
Rule 89    operador_relacional -> IGUAL
Rule 90    operador_relacional -> MENORIGUAL
Rule 91    operador_relacional -> MAYORIGUAL
Rule 92    operador_relacional -> DIFERENTE
Rule 93    operador_aritmetico -> SUMA
Rule 94    operador_aritmetico -> RESTA
Rule 95    operador_aritmetico -> MULTIPLICACION
Rule 96    operador_aritmetico -> DIVISION
Rule 97    operador_termino -> MULTIPLICACION
Rule 98    operador_termino -> DIVISION
Rule 99    operador_termino -> MODULO
Rule 100   empty -> <empty>

Terminals, with rules where they appear

AND                  : 19 85
AND_LOGICO           : 
ANY                  : 45 64
ASIGNAR              : 55 57
BOOL                 : 62
BRING                : 1
CADENA               : 39 83
CATCH                : 
CLASS                : 
COMA                 : 10 13
COMILLAS_DOBLES      : 
COMILLAS_SIMPLES     : 
CONST                : 
CORCHETE_APERTURA    : 
CORCHETE_CIERRE      : 
DECREMENTO           : 
DEGREE               : 40 58
DIFERENTE            : 29 92
DISTANCE             : 42 60
DIVISION             : 37 96 98
DOSPUNTOS            : 
ELSE                 : 16
FOR                  : 18
FUN                  : 8
GRADOS               : 
ID                   : 1 8 12 13 32 55 56 57 65 80
IF                   : 15 16
IGUAL                : 26 89
INCREMENTO           : 
INIT                 : 
LLAVE_APERTURA       : 46
LLAVE_CIERRE         : 46
MAYORIGUAL           : 28 91
MAYORQUE             : 25 88
MENORIGUAL           : 27 90
MENORQUE             : 24 87
MODULO               : 99
MULTIPLICACION       : 36 95 97
NOT                  : 21
NUMERO               : 38 82
OR                   : 20 86
OR_LOGICO            : 
PARENTESIS_APERTURA  : 8 15 16 17 18 22 31 65 84
PARENTESIS_CIERRE    : 8 15 16 17 18 22 31 65 84
POTENCIA             : 
PUNTO                : 
PUNTOCOMA            : 1 18 18 54 55 56 57 65 69
REAL                 : 
RESTA                : 35 94
RETURN               : 69
SIMGRADOS            : 
STATE                : 44 63
SUMA                 : 34 93
SWITCH               : 
TEMP                 : 43 61
TIME                 : 41 59
TRY                  : 
<<<<<<< HEAD
VAR                  : 55 56
=======
VAR                  : 
>>>>>>> 9125a19 (api con el sintactico)
VOID                 : 
WHILE                : 17
error                : 

Nonterminals, with rules where they appear

argumentos           : 10 65
asignacion           : 50
condicion            : 19 19 20 20 21 22
cuerpo               : 8 15 16 16 17 18
dato                 : 33
declaracion_variable : 18 49
empty                : 11 14
estructura_control   : 51
exp                  : 23 23 30 30 31
expresion            : 9 10 15 16 17 18 18 54 55 57 69 71 84
expresion_aritmetica : 74 75 77
expresion_logica     : 70 71 73
expresion_relacional : 72 73 75
factor               : 78 79
funcion              : 3 5 6 7
funciones            : 6
importacion          : 2 4 0
llamada_funcion      : 52 81
op_aritmetico        : 30
op_relacional        : 23
operador_aritmetico  : 77
operador_logico      : 71
operador_relacional  : 73 75
operador_termino     : 79
parametros_declaracion : 8 13
programa             : 2 3
retorno              : 53
sentencia            : 47 48
sentencia_for        : 67
sentencia_if         : 66
sentencia_while      : 68
sentencias           : 46 47
termino              : 76 77 79
<<<<<<< HEAD
tipo_dato            : 12 13
=======
tipo_dato            : 12 13 55 56
>>>>>>> 9125a19 (api con el sintactico)

Parsing method: LALR

state 0

    (0) S' -> . importacion
    (1) importacion -> . BRING ID PUNTOCOMA

    BRING           shift and go to state 2

    importacion                    shift and go to state 1

state 1

    (0) S' -> importacion .



state 2

    (1) importacion -> BRING . ID PUNTOCOMA

    ID              shift and go to state 3


state 3

    (1) importacion -> BRING ID . PUNTOCOMA

    PUNTOCOMA       shift and go to state 4


state 4

    (1) importacion -> BRING ID PUNTOCOMA .

    $end            reduce using rule 1 (importacion -> BRING ID PUNTOCOMA .)

